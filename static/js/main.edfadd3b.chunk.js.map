{"version":3,"sources":["components/HeaderBanner.js","components/BoardList.js","components/BoardView.js","App.js","serviceWorker.js","index.js"],"names":["HeaderBanner","this","props","title","sub","Component","BoardList","lists","data","i","length","push","key","id","href","BoardView","desc","App","state","headerBanner","boardList","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2NAWeA,E,iLARX,OACE,gCACE,4BAAKC,KAAKC,MAAMC,OACfF,KAAKC,MAAME,S,GALOC,aCyBZC,E,iLAnBX,IAHA,IAAIC,EAAQ,GACRC,EAAOP,KAAKC,MAAMM,KAClBC,EAAI,EACDA,EAAID,EAAKE,QACdH,EAAMI,KAEJ,wBAAIC,IAAKJ,EAAKC,GAAGI,IACf,8BAAOL,EAAKC,GAAGI,GAAf,KACA,uBAAGC,KAAM,UAAYN,EAAKC,GAAGI,IAAKL,EAAKC,GAAGN,SAG9CM,GAAQ,EAEV,OACE,6BACE,4BACGF,Q,GAnBaF,aCUTU,E,iLARX,OACE,iCACE,4BAAKd,KAAKC,MAAMC,OACfF,KAAKC,MAAMc,U,GALIX,aC0DTY,G,kBA5Cb,WAAaf,GAAQ,IAAD,8BAElB,4CAAOA,KAEFgB,MAAQ,CACXC,aAAc,CAAChB,MAAO,6DAAiBC,IAAK,kCAC5CgB,UAAW,CAET,CACEP,GAAI,EACJV,MAAO,yJACPa,KAAM,kKAER,CACEH,GAAI,EACJV,MAAO,yJACPa,KAAM,kKAER,CACEH,GAAI,EACJV,MAAO,yJACPa,KAAM,oKArBM,E,sEA4BlB,OACE,yBAAKK,UAAU,OACb,kBAAC,EAAD,CACElB,MAAOF,KAAKiB,MAAMC,aAAahB,MAC/BC,IAAKH,KAAKiB,MAAMC,aAAaf,MAE/B,kBAAC,EAAD,CAAWI,KAAMP,KAAKiB,MAAME,YAC5B,kBAAC,EAAD,CACEjB,MAAM,wJACNa,KAAK,uK,GAvCGX,cCDEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAQ,kBAAC,EAAD,MAASC,SAASC,eAAgB,SD4H7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.edfadd3b.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nclass HeaderBanner extends Component {\r\n  render () {\r\n    return (\r\n      <header>\r\n        <h1>{this.props.title}</h1>\r\n        {this.props.sub}\r\n      </header>\r\n    );\r\n  }\r\n}\r\nexport default HeaderBanner;\r\n","import React, {Component} from 'react';\r\nclass BoardList extends Component {\r\n  render () {\r\n    //출력 데이터 처리\r\n    var lists = [];\r\n    var data = this.props.data;\r\n    var i = 0;\r\n    while (i < data.length) {\r\n      lists.push (\r\n        //반복구문 key값-고유값 처리\r\n        <li key={data[i].id}>\r\n          <span>{data[i].id} </span>\r\n          <a href={'/board/' + data[i].id}>{data[i].title}</a>\r\n        </li>\r\n      );\r\n      i = i + 1;\r\n    }\r\n    return (\r\n      <nav>\r\n        <ul>\r\n          {lists}\r\n        </ul>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\nexport default BoardList;\r\n","import React, {Component} from 'react';\r\nclass BoardView extends Component {\r\n  render () {\r\n    return (\r\n      <article>\r\n        <h2>{this.props.title}</h2>\r\n        {this.props.desc}\r\n      </article>\r\n    );\r\n  }\r\n}\r\nexport default BoardView;\r\n","/* App.js */\nimport React, {Component} from 'react';\nimport HeaderBanner from './components/HeaderBanner';\nimport BoardList from './components/BoardList';\nimport BoardView from './components/BoardView';\nimport './App.css';\n//헤더 컴포넌트를 만드는 코드(src/components/HeaderBanner.js)\n\n//리스트제목 컴포넌트를 만드는 코드(src/components/BoardList.js)\n\n//리스트뷰 컴포넌트를 만드는 코드(src/components/BoardView.js)\n\n//메인 컴포넌트를 만드는 코드(아래)\nclass App extends Component {\n  //콤포넌트 생성자 : 콤포넌트 실행시 자동 실행(초기화)\n  constructor (props) {\n    //props(속성) 과 state(자료) 관계\n    super (props); //부모클래스-Component의 props속성을 사용하겠다고 선언, 이후 부터 this 키워드 사용가능\n    //부모클래스 props속성의 state값 초기화\n    this.state = {\n      headerBanner: {title: '리액트 IN 자바스크립트', sub: '한줄게시판'}, //1차원 배열 json 데이터\n      boardList: [\n        //2차원 배열 json 데이터\n        {\n          id: 1,\n          title: '리액트 IN 자바스크립트? 미션 프로젝트 (한줄게시판 만들기)1',\n          desc: '이 프로젝트는 리액트를 이용해서 CRUD를 실습해 볼 수 있습니다.1',\n        },\n        {\n          id: 2,\n          title: '리액트 IN 자바스크립트? 미션 프로젝트 (한줄게시판 만들기)2',\n          desc: '이 프로젝트는 리액트를 이용해서 CRUD를 실습해 볼 수 있습니다.2',\n        },\n        {\n          id: 3,\n          title: '리액트 IN 자바스크립트? 미션 프로젝트 (한줄게시판 만들기)3',\n          desc: '이 프로젝트는 리액트를 이용해서 CRUD를 실습해 볼 수 있습니다.3',\n        },\n      ],\n    };\n  }\n  render () {\n    //constructor (props) 부모클래스의 초기화한 값을 아래 태그의 속성(props)에 this값으로 전달\n    return (\n      <div className=\"App\">\n        <HeaderBanner\n          title={this.state.headerBanner.title}\n          sub={this.state.headerBanner.sub}\n        />\n        <BoardList data={this.state.boardList} />\n        <BoardView\n          title=\"리액트 IN 자바스크립트? 미션 프로젝트 (한줄게시판 만들기)\"\n          desc=\"이 프로젝트는 리액트를 이용해서 CRUD를 실습해 볼 수 있습니다.\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/* index.js */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render (<App />, document.getElementById ('root'));\n\n// 앱이 오프라인에서 작동하고 더 빨리로드되도록하려면\n// 아래의 unregister()를 register()로 변경 합니다.\nserviceWorker.unregister ();\n"],"sourceRoot":""}