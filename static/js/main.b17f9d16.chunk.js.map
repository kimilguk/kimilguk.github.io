{"version":3,"sources":["components/HeaderBanner.js","components/BoardList.js","components/BoardView.js","App.js","serviceWorker.js","index.js"],"names":["HeaderBanner","console","log","this","href","onClick","e","preventDefault","props","onChangePage","bind","title","sub","Component","BoardList","lists","data","i","length","push","key","id","data-id","target","dataset","BoardView","desc","App","state","mode","headerBanner","boardList","_title","_desc","selected_boardView_id","className","setState","Number","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2NAsBeA,E,iLAlBX,OADAC,QAAQC,IAAK,2HAAuCC,MAElD,gCACE,4BACE,uBACEC,KAAK,IACLC,QAAS,SAAUC,GACjBA,EAAEC,iBACFJ,KAAKK,MAAMC,gBACXC,KAAMP,OAEPA,KAAKK,MAAMG,QAGfR,KAAKK,MAAMI,S,GAhBOC,aCqCZC,E,iLAnCXb,QAAQC,IAAK,2HAAuCC,MAKpD,IAHA,IAAIY,EAAQ,GACRC,EAAOb,KAAKK,MAAMQ,KAClBC,EAAI,EACDA,EAAID,EAAKE,QACdH,EAAMI,KAEJ,wBAAIC,IAAKJ,EAAKC,GAAGI,IACf,8BAAOL,EAAKC,GAAGI,GAAf,KACA,uBACEjB,KAAM,UAAYY,EAAKC,GAAGI,GAC1BC,UAASN,EAAKC,GAAGI,GACjBhB,QAAS,SAAUC,GAGjBA,EAAEC,iBACFJ,KAAKK,MAAMC,aAAcH,EAAEiB,OAAOC,QAAQH,KAC1CX,KAAMP,OAEPa,EAAKC,GAAGN,SAIfM,GAAQ,EAEV,OACE,6BACE,4BACGF,Q,GA/BaF,aCWTY,E,iLARX,OADAxB,QAAQC,IAAK,2HAAuCC,MAElD,iCACE,4BAAKA,KAAKK,MAAMG,OACfR,KAAKK,MAAMkB,U,GANIb,aC0GTc,G,kBA5Fb,WAAanB,GAAQ,IAAD,8BAElB,4CAAOA,KAEFoB,MAAQ,CACXC,KAAM,UAENC,aAAc,CAACnB,MAAO,6DAAiBC,IAAK,kCAC5CmB,UAAW,CAET,CACEV,GAAI,EACJV,MAAO,yJACPe,KAAM,kKAER,CACEL,GAAI,EACJV,MAAO,yJACPe,KAAM,kKAER,CACEL,GAAI,EACJV,MAAO,yJACPe,KAAM,oKAvBM,E,sEA8BlBzB,QAAQC,IAAK,2HAAuCC,MACpD,IAAI6B,EAAQC,EAAQ,KACpB,GAAwB,YAApB9B,KAAKyB,MAAMC,KACbG,EAAS7B,KAAKyB,MAAME,aAAanB,MACjCsB,EAAQ9B,KAAKyB,MAAME,aAAalB,SAC3B,GAAwB,SAApBT,KAAKyB,MAAMC,KAEpB,IADA,IAAIZ,EAAI,EACDA,EAAId,KAAKyB,MAAMG,UAAUb,QAAQ,CACtC,IAAIF,EAAOb,KAAKyB,MAAMG,UAAUd,GAChC,GAAID,EAAKK,KAAOlB,KAAKyB,MAAMM,sBAAuB,CAChDF,EAAShB,EAAKL,MACdsB,EAAQjB,EAAKU,KACb,MAEFT,GAAQ,EAOZ,OACE,yBAAKkB,UAAU,OACb,kBAAC,EAAD,CACExB,MAAOR,KAAKyB,MAAME,aAAanB,MAC/BC,IAAKT,KAAKyB,MAAME,aAAalB,IAC7BH,aAAc,WAEZN,KAAKiC,SAAU,CAACP,KAAM,aACtBnB,KAAMP,QAmBV,kBAAC,EAAD,CACEM,aAAc,SAAUY,GAGtBlB,KAAKiC,SAAU,CAACP,KAAM,OAAQK,sBAAuBG,OAAQhB,MAC7DX,KAAMP,MACRa,KAAMb,KAAKyB,MAAMG,YAEnB,kBAAC,EAAD,CAAWpB,MAAOqB,EAAQN,KAAMO,S,GAxFtBpB,cCDEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAQ,kBAAC,EAAD,MAASC,SAASC,eAAgB,SD4H7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrD,QAAQqD,MAAMA,EAAMC,a","file":"static/js/main.b17f9d16.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nclass HeaderBanner extends Component {\r\n  render () {\r\n    console.log ('render()안에서 this는 콤포넌트 모듈 자신을 가리킨다.', this);\r\n    return (\r\n      <header>\r\n        <h1>\r\n          <a\r\n            href=\"/\"\r\n            onClick={function (e) {\r\n              e.preventDefault ();\r\n              this.props.onChangePage ();\r\n            }.bind (this)}\r\n          >\r\n            {this.props.title}\r\n          </a>\r\n        </h1>\r\n        {this.props.sub}\r\n      </header>\r\n    );\r\n  }\r\n}\r\nexport default HeaderBanner;\r\n","import React, {Component} from 'react';\r\nclass BoardList extends Component {\r\n  render () {\r\n    console.log ('render()안에서 this는 콤포넌트 모듈 자신을 가리킨다.', this);\r\n    //출력 데이터 처리\r\n    var lists = [];\r\n    var data = this.props.data;\r\n    var i = 0;\r\n    while (i < data.length) {\r\n      lists.push (\r\n        //반복구문 key값-고유값 처리\r\n        <li key={data[i].id}>\r\n          <span>{data[i].id} </span>\r\n          <a\r\n            href={'/board/' + data[i].id}\r\n            data-id={data[i].id} //이 부분을 사용하지 않는다면, 아래 //주석부분처럼 값을 변경해야 합니다.\r\n            onClick={function (e) {\r\n              //(id,e)\r\n              //debugger;//크롬 디버거연동\r\n              e.preventDefault ();\r\n              this.props.onChangePage (e.target.dataset.id);\r\n            }.bind (this)} //(this, data[i].id)\r\n          >\r\n            {data[i].title}\r\n          </a>\r\n        </li>\r\n      );\r\n      i = i + 1;\r\n    }\r\n    return (\r\n      <nav>\r\n        <ul>\r\n          {lists}\r\n        </ul>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\nexport default BoardList;\r\n","import React, {Component} from 'react';\r\nclass BoardView extends Component {\r\n  render () {\r\n    console.log ('render()안에서 this는 콤포넌트 모듈 자신을 가리킨다.', this);\r\n    return (\r\n      <article>\r\n        <h2>{this.props.title}</h2>\r\n        {this.props.desc}\r\n      </article>\r\n    );\r\n  }\r\n}\r\nexport default BoardView;\r\n","/* App.js */\nimport React, {Component} from 'react';\nimport HeaderBanner from './components/HeaderBanner';\nimport BoardList from './components/BoardList';\nimport BoardView from './components/BoardView';\nimport './App.css';\n//헤더 컴포넌트를 만드는 코드(src/components/HeaderBanner.js)\n\n//리스트제목 컴포넌트를 만드는 코드(src/components/BoardList.js)\n\n//리스트뷰 컴포넌트를 만드는 코드(src/components/BoardView.js)\n\n//메인 컴포넌트를 만드는 코드(아래)\nclass App extends Component {\n  //콤포넌트 생성자 : 콤포넌트 실행시 자동 실행(초기화)\n  constructor (props) {\n    //props(속성) 과 state(자료) 관계\n    super (props); //부모클래스-Component의 props속성을 사용하겠다고 선언, 이후 부터 this 키워드 사용가능\n    //부모클래스 props속성의 state값 초기화\n    this.state = {\n      mode: 'default', //변수에 초기값 지정\n      //selected_boardView_id: 2, //선택한 게시물 번호 강제로 초기화 할때,\n      headerBanner: {title: '리액트 IN 자바스크립트', sub: '한줄게시판'}, //1차원 배열 json 데이터\n      boardList: [\n        //2차원 배열 json 데이터\n        {\n          id: 1,\n          title: '리액트 IN 자바스크립트? 미션 프로젝트 (한줄게시판 만들기)1',\n          desc: '이 프로젝트는 리액트를 이용해서 CRUD를 실습해 볼 수 있습니다.1',\n        },\n        {\n          id: 2,\n          title: '리액트 IN 자바스크립트? 미션 프로젝트 (한줄게시판 만들기)2',\n          desc: '이 프로젝트는 리액트를 이용해서 CRUD를 실습해 볼 수 있습니다.2',\n        },\n        {\n          id: 3,\n          title: '리액트 IN 자바스크립트? 미션 프로젝트 (한줄게시판 만들기)3',\n          desc: '이 프로젝트는 리액트를 이용해서 CRUD를 실습해 볼 수 있습니다.3',\n        },\n      ],\n    };\n  }\n  //props-state의 값이 바뀌면 html을 그리는 함수 render 자동으로 재 실행됨\n  render () {\n    console.log ('render()안에서 this는 콤포넌트 모듈 자신을 가리킨다.', this);\n    var _title, _desc = null;\n    if (this.state.mode === 'default') {\n      _title = this.state.headerBanner.title;\n      _desc = this.state.headerBanner.sub;\n    } else if (this.state.mode === 'read') {\n      var i = 0;\n      while (i < this.state.boardList.length) {\n        var data = this.state.boardList[i];\n        if (data.id === this.state.selected_boardView_id) {\n          _title = data.title;\n          _desc = data.desc;\n          break;\n        }\n        i = i + 1;\n      }\n      //초기값 강제로 줄때(아래)\n      /* _title = this.state.boardList[0].title;\n      _desc = this.state.boardList[0].desc; */\n    }\n    //constructor (props) 부모클래스의 초기화한 값을 아래 태그의 속성(props)에 this값으로 전달\n    return (\n      <div className=\"App\">\n        <HeaderBanner\n          title={this.state.headerBanner.title}\n          sub={this.state.headerBanner.sub}\n          onChangePage={function () {\n            //alert ('HeaderBanner');//디버그\n            this.setState ({mode: 'default'});\n          }.bind (this)}\n        />\n        {/* <header>\n          <h1>\n            <a\n              href=\"/\"\n              onClick={function (e) {\n                console.log (e);\n                e.preventDefault ();\n                //this.state.mode = 'read';//작동않됨.\n                this.setState ({mode: 'default'});\n                //debugger; //크롬 개발자도구 Sources 에서 현재 라인에서 멈춤\n              }.bind (this)} //함수내에서 this사용시 bind 로 주입필요\n            >\n              {this.state.headerBanner.title}\n            </a>\n          </h1>\n          {this.state.headerBanner.sub}\n        </header> */}\n        <BoardList\n          onChangePage={function (id) {\n            //alert ('BoardList');//디버그\n            //debugger;크롬 디버거연동\n            this.setState ({mode: 'read', selected_boardView_id: Number (id)});\n          }.bind (this)}\n          data={this.state.boardList}\n        />\n        <BoardView title={_title} desc={_desc} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/* index.js */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render (<App />, document.getElementById ('root'));\n\n// 앱이 오프라인에서 작동하고 더 빨리로드되도록하려면\n// 아래의 unregister()를 register()로 변경 합니다.\nserviceWorker.unregister ();\n"],"sourceRoot":""}