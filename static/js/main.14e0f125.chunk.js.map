{"version":3,"sources":["components/Header.js","components/HeaderBanner.js","components/BoardList.js","components/Control.js","components/BoardView.js","components/BoardForm.js","components/BoardFormUpdate.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","newProps","newState","this","props","data","console","log","menuCloseStyle","padding","background","id","className","href","target","style","float","Component","HeaderBanner","onClick","e","preventDefault","onChangePage","bind","title","sub","BoardList","lists","i","length","push","key","data-id","dataset","action","type","placeholder","summary","scope","Control","onChangeMode","BoardView","desc","split","map","line","BoardForm","method","onSubmit","value","htmlFor","cursor","BoardFormUpdate","state","inputFormHandler","setState","onChange","Footer","App","max_board_id","mode","selected_boardView_id","headerBanner","boardList","_title","_desc","_article","_content","_contents","Array","from","getBoardViewContent","_id","clear","Number","_mode","alert","window","confirm","_deleteContents","splice","getBoardView","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.14e0f125.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nclass Header extends Component {\r\n  //무조건 render()가 호출되는 상황을 방지 false, true\r\n  shouldComponentUpdate (newProps, newState) {\r\n    if (this.props.data === newProps.data) {\r\n      console.log ('Header.js콤포넌트 값 무변경시 리로드 render()방지');\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n  render () {\r\n    console.log ('render()안에서 this는 Header.js콤포넌트 모듈 자신을 가리킨다.', this);\r\n    const menuCloseStyle = {padding: '0 10px 0 50px', background: 'none'};\r\n    return (\r\n      <header id=\"header\">\r\n        <div className=\"header_area box_inner clear\">\r\n          <h1><a href=\"/\">리액트 IN 자바스크립트</a></h1>\r\n          <p className=\"openMOgnb\">\r\n            <a href=\"#LINK\">\r\n              <b className=\"hdd\">메뉴열기</b> <span /><span /><span />\r\n            </a>\r\n          </p>\r\n          {/* <!-- header_cont --> */}\r\n          <div className=\"header_cont\">\r\n            <ul className=\"util clear\">\r\n              <li><a href=\"#LINK\">로그인</a></li>\r\n              <li><a href=\"#LINK\">회원가입</a></li>\r\n            </ul>\r\n            <nav>\r\n              <ul className=\"gnb clear\">\r\n                <li>\r\n                  <a href=\"#LINK\" className=\"openAll1 openAll\">\r\n                    리액트정보\r\n                  </a>\r\n\r\n                  <div className=\"gnb_depth gnb_depth2_1\">\r\n                    <ul className=\"submenu_list\">\r\n                      <li>\r\n                        <a\r\n                          href=\"https://github.com/miniplugin/miniplugin.github.io\"\r\n                          target=\"_new\"\r\n                        >\r\n                          국내\r\n                        </a>\r\n                      </li>\r\n                      <li>\r\n                        <a\r\n                          href=\"https://github.com/miniplugin/miniplugin.github.io\"\r\n                          target=\"_new\"\r\n                        >\r\n                          해외\r\n                        </a>\r\n                      </li>\r\n                    </ul>\r\n                    <p className=\"closeSubmenu\" style={{float: 'right'}}>\r\n                      <a href=\"#LINK\" style={menuCloseStyle}>\r\n                        닫기\r\n                      </a>\r\n                    </p>\r\n                  </div>\r\n                </li>\r\n                <li>\r\n                  <a href=\"#LINK\" className=\"openAll2 openAll\">고객센터</a>\r\n                  <div className=\"gnb_depth gnb_depth2_2\">\r\n                    <ul className=\"submenu_list\">\r\n                      <li><a href=\"#LINK\">한줄게시판</a></li>\r\n                      <li><a href=\"#LINK\">문의하기</a></li>\r\n                    </ul>\r\n                    <p className=\"closeSubmenu\" style={{float: 'right'}}>\r\n                      <a href=\"#LINK\" style={menuCloseStyle}>\r\n                        닫기\r\n                      </a>\r\n                    </p>\r\n                  </div>\r\n                </li>\r\n              </ul>\r\n            </nav>\r\n            <p className=\"closePop\"><a href=\"#LINK\">닫기</a></p>\r\n          </div>\r\n          {/* <!-- //header_cont --> */}\r\n        </div>\r\n      </header>\r\n    );\r\n  }\r\n}\r\nexport default Header;\r\n","import React, {Component} from 'react';\r\nclass HeaderBanner extends Component {\r\n  //무조건 render()가 호출되는 상황을 방지 false, true\r\n  shouldComponentUpdate (newProps, newState) {\r\n    if (this.props.data === newProps.data) {\r\n      console.log ('HeaderBanner.js콤포넌트 값 무변경시 리로드 render()방지');\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n  render () {\r\n    console.log ('render()안에서 this는 HeaderBanner.js콤포넌트 모듈 자신을 가리킨다.', this);\r\n    return (\r\n      <div className=\"location_area customer\">\r\n        <div className=\"box_inner\">\r\n          <h2 className=\"tit_page\">\r\n            <a\r\n              href=\"/\"\r\n              onClick={function (e) {\r\n                e.preventDefault ();\r\n                this.props.onChangePage ();\r\n              }.bind (this)}\r\n            >\r\n              {this.props.title}\r\n            </a>\r\n          </h2>\r\n          <p className=\"location\">\r\n            고객센터 <span className=\"path\">/</span> {this.props.sub}\r\n          </p>\r\n          <ul className=\"page_menu clear\">\r\n            <li>\r\n              <a\r\n                href=\"/\"\r\n                onClick={function (e) {\r\n                  e.preventDefault ();\r\n                  this.props.onChangePage ();\r\n                }.bind (this)}\r\n              >\r\n                {this.props.title}\r\n              </a>\r\n            </li>\r\n            <li>{this.props.sub}</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default HeaderBanner;\r\n","import React, {Component} from 'react';\r\nclass BoardList extends Component {\r\n  //무조건 render()가 호출되는 상황을 방지 false, true\r\n  shouldComponentUpdate (newProps, newState) {\r\n    if (this.props.data === newProps.data) {\r\n      console.log ('BoardList.js콤포넌트 값 무변경시 리로드 render()방지');\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n  render () {\r\n    console.log ('render()안에서 this는 BoardList.js콤포넌트 모듈 자신을 가리킨다.', this);\r\n    //출력 데이터 처리\r\n    var lists = [];\r\n    var data = this.props.data;\r\n    var i = 0;\r\n    while (i < data.length) {\r\n      lists.push (\r\n        //반복구문 key값-고유값 처리\r\n        <tr key={data[i].id}>\r\n          <td>{data[i].id} </td>\r\n          <td className=\"tit_notice\">\r\n            <a\r\n              href={'/board/' + data[i].id}\r\n              data-id={data[i].id} //이 부분을 사용하지 않는다면, 아래 //주석부분처럼 값을 변경해야 합니다.\r\n              onClick={function (e) {\r\n                //(id,e)\r\n                //debugger;//크롬 디버거연동\r\n                e.preventDefault ();\r\n                this.props.onChangePage (e.target.dataset.id);\r\n              }.bind (this)} //(this, data[i].id)\r\n            >\r\n              {data[i].title}\r\n            </a>\r\n          </td>\r\n        </tr>\r\n      );\r\n      i = i + 1;\r\n    }\r\n    return (\r\n      <div>\r\n        <form action=\"#LINK\" className=\"minisrch_form\">\r\n          <fieldset>\r\n            <legend>검색</legend>\r\n            <input\r\n              type=\"text\"\r\n              className=\"tbox\"\r\n              title=\"검색어를 입력해주세요\"\r\n              placeholder=\"검색어를 입력해주세요\"\r\n            />\r\n            <a href=\"#LINK\" className=\"btn_srch\">검색</a>\r\n          </fieldset>\r\n        </form>\r\n        {/* <!-- BoardList --> */}\r\n        <table className=\"bbsListTbl\" summary=\"번호,제목,조회수,작성일 등을 제공하는 표\">\r\n          <caption className=\"hdd\">\r\n            공지사항 목록\r\n          </caption>\r\n          <thead>\r\n            <tr>\r\n              <th scope=\"col\">번호</th>\r\n              <th scope=\"col\">제목</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {lists}\r\n          </tbody>\r\n        </table>\r\n        {/* <!-- //BoardList --> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default BoardList;\r\n","import React, {Component} from 'react';\r\nclass Control extends Component {\r\n  //무조건 render()가 호출되는 상황을 방지 false, true\r\n  shouldComponentUpdate (newProps, newState) {\r\n    if (this.props.data === newProps.data) {\r\n      console.log ('Control.js콤포넌트 값 무변경시 리로드 render()방지');\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n  render () {\r\n    console.log ('render()안에서 this는 Control.js콤포넌트 모듈 자신을 가리킨다.', this);\r\n    return (\r\n      <p className=\"btn_line txt_right\">\r\n        <a\r\n          href=\"/list\"\r\n          onClick={function (e) {\r\n            e.preventDefault ();\r\n            this.props.onChangeMode ('list');\r\n          }.bind (this)}\r\n          className=\"btn_bbs\"\r\n        >\r\n          목록\r\n        </a>\r\n        <a\r\n          href=\"/create\"\r\n          onClick={function (e) {\r\n            e.preventDefault ();\r\n            this.props.onChangeMode ('create');\r\n          }.bind (this)}\r\n          className=\"btn_bbs\"\r\n        >\r\n          등록\r\n        </a>\r\n        <a\r\n          href=\"/update\"\r\n          onClick={function (e) {\r\n            e.preventDefault ();\r\n            this.props.onChangeMode ('update');\r\n          }.bind (this)}\r\n          className=\"btn_bbs\"\r\n        >\r\n          수정\r\n        </a>\r\n        <a\r\n          href=\"/\"\r\n          onClick={function (e) {\r\n            e.preventDefault ();\r\n            this.props.onChangeMode ('delete');\r\n          }.bind (this)}\r\n          className=\"btn_bbs\"\r\n        >\r\n          삭제\r\n        </a>\r\n      </p>\r\n    );\r\n  }\r\n}\r\nexport default Control;\r\n","import React, {Component} from 'react';\r\nclass BoardView extends Component {\r\n  render () {\r\n    console.log ('render()안에서 this는 BoardView.js콤포넌트 모듈 자신을 가리킨다.', this);\r\n    var i = 0;\r\n    return (\r\n      <div>\r\n        {/* <!-- BoardView --> */}\r\n        <ul className=\"bbsview_list\">\r\n          <li className=\"bbs_title\">{this.props.id}. {this.props.title}</li>\r\n          <li className=\"bbs_content\">\r\n            <div className=\"editer_content\">\r\n              {/* this.props.desc.replace (/\\n/g, '<br/>') */}\r\n              {this.props.desc.split ('\\n').map (line => {\r\n                return <span key={i++}>{line}<br /></span>;\r\n              })}\r\n            </div>\r\n          </li>\r\n        </ul>\r\n        {/* <!-- //BoardView --> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default BoardView;\r\n","import React, {Component} from 'react';\r\nclass BoardForm extends Component {\r\n  //무조건 render()가 호출되는 상황을 방지 false, true\r\n  shouldComponentUpdate (newProps, newState) {\r\n    if (this.props.data === newProps.data) {\r\n      console.log ('BoardForm.js콤포넌트 값 무변경시 리로드 render()방지');\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n  render () {\r\n    console.log ('render()안에서 this는 BoardForm.js콤포넌트 모듈 자신을 가리킨다.', this);\r\n    return (\r\n      <div>\r\n        {/* <!-- BoardForm --> */}\r\n        <form\r\n          action=\"/create_process\"\r\n          className=\"appForm\"\r\n          method=\"post\"\r\n          onSubmit={function (e) {\r\n            e.preventDefault ();\r\n            //alert ('등록');//디버그\r\n            //debugger; //크롬 디버거 연동\r\n            this.props.onSubmit (e.target.title.value, e.target.desc.value);\r\n          }.bind (this)}\r\n        >\r\n          <fieldset>\r\n            <legend>한줄게시판 입력 양식</legend>\r\n            <p className=\"info_pilsoo pilsoo_item\">필수입력</p>\r\n            <ul className=\"app_list\">\r\n              <li className=\"clear\">\r\n                <label htmlFor=\"title\" className=\"tit_lbl pilsoo_item\">\r\n                  제목\r\n                </label>\r\n                <div className=\"app_content\">\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"w100p\"\r\n                    id=\"title\"\r\n                    placeholder=\"제목을 입력해주세요\"\r\n                  />\r\n                </div>\r\n              </li>\r\n              <li className=\"clear\">\r\n                <label htmlFor=\"desc\" className=\"tit_lbl\">내용</label>\r\n                <div className=\"app_content\">\r\n                  <textarea\r\n                    id=\"desc\"\r\n                    className=\"w100p\"\r\n                    placeholder=\"내용을 입력해주세요\"\r\n                  />\r\n                </div>\r\n              </li>\r\n            </ul>\r\n            <p className=\"btn_line\">\r\n              <input\r\n                type=\"submit\"\r\n                className=\"btn_baseColor\"\r\n                value=\"저장\"\r\n                style={{cursor: 'pointer'}}\r\n              />\r\n            </p>\r\n          </fieldset>\r\n        </form>\r\n        {/* <!-- //BoardForm --> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default BoardForm;\r\n","import React, {Component} from 'react';\r\nclass BoardFormUpdate extends Component {\r\n  //기존 데이터 불러오기\r\n  constructor (props) {\r\n    super (props);\r\n    this.state = {\r\n      title: this.props.data.title,\r\n      desc: this.props.data.desc,\r\n      id: this.props.data.id,\r\n    };\r\n    this.inputFormHandler = this.inputFormHandler.bind (this);\r\n  }\r\n  /* 아래 inputFormHandler(e)로 교체\r\n  onChange={function (e) {\r\n    console.log (e.target.value);\r\n    this.setState ({title: e.target.value});\r\n  }.bind (this)} */\r\n  inputFormHandler (e) {\r\n    console.log (e.target.value);\r\n    this.setState ({[e.target.id]: e.target.value});\r\n  }\r\n  render () {\r\n    console.log ('update 기존 값을 가리킨다.', this.props.data);\r\n    console.log ('render()안에서 this는 BoardFormUpdate.js콤포넌트 모듈 자신을 가리킨다.', this);\r\n    return (\r\n      <div>\r\n        {/* <!-- BoardForm --> */}\r\n        <form\r\n          action=\"/update_process\"\r\n          className=\"appForm\"\r\n          method=\"post\"\r\n          onSubmit={function (e) {\r\n            e.preventDefault ();\r\n            //alert ('등록');//디버그\r\n            //debugger; //크롬 디버거 연동\r\n            this.props.onSubmit (\r\n              this.state.id,\r\n              this.state.title,\r\n              this.state.desc\r\n            );\r\n          }.bind (this)}\r\n        >\r\n          <input type=\"hidden\" id=\"id\" value={this.state.id} />\r\n          <fieldset>\r\n            <legend>한줄게시판 입력 양식</legend>\r\n            <p className=\"info_pilsoo pilsoo_item\">필수입력</p>\r\n            <ul className=\"app_list\">\r\n              <li className=\"clear\">\r\n                <label htmlFor=\"title\" className=\"tit_lbl pilsoo_item\">\r\n                  제목\r\n                </label>\r\n                <div className=\"app_content\">\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"w100p\"\r\n                    id=\"title\"\r\n                    placeholder=\"제목을 입력해주세요\"\r\n                    value={this.state.title}\r\n                    onChange={this.inputFormHandler}\r\n                  />\r\n                </div>\r\n              </li>\r\n              <li className=\"clear\">\r\n                <label htmlFor=\"desc\" className=\"tit_lbl\">내용</label>\r\n                <div className=\"app_content\">\r\n                  <textarea\r\n                    id=\"desc\"\r\n                    className=\"w100p\"\r\n                    placeholder=\"내용을 입력해주세요\"\r\n                    value={this.state.desc}\r\n                    onChange={function (e) {\r\n                      console.log (e.target.value);\r\n                      this.setState ({desc: e.target.value});\r\n                    }.bind (this)}\r\n                  />\r\n                </div>\r\n              </li>\r\n            </ul>\r\n            <p className=\"btn_line\">\r\n              <input\r\n                type=\"submit\"\r\n                className=\"btn_baseColor\"\r\n                value=\"수정\"\r\n                style={{cursor: 'pointer'}}\r\n              />\r\n            </p>\r\n          </fieldset>\r\n        </form>\r\n        {/* <!-- //BoardForm --> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default BoardFormUpdate;\r\n","import React, {Component} from 'react';\r\nclass Footer extends Component {\r\n  //무조건 render()가 호출되는 상황을 방지 false, true\r\n  shouldComponentUpdate (newProps, newState) {\r\n    if (this.props.data === newProps.data) {\r\n      console.log ('Footer.js콤포넌트 값 무변경시 리로드 render()방지');\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n  render () {\r\n    console.log ('render()안에서 this는 Footer.js콤포넌트 모듈 자신을 가리킨다.', this);\r\n    return (\r\n      <footer>\r\n        <div className=\"foot_area box_inner\">\r\n          <ul className=\"foot_list clear\">\r\n            <li><a href=\"#LINK\">이용약관</a></li>\r\n            <li><a href=\"#LINK\">개인정보취급방침</a></li>\r\n          </ul>\r\n          <h2>리액트</h2>\r\n          <p className=\"addr\">\r\n            리액트 IN 자바스크립트 <span className=\"gubun\">/</span>\r\n            <span className=\"br_line\">\r\n              대표전화 <span className=\"space0\">02-1234-5678</span>\r\n              <span className=\"gubun\">/</span>\r\n              <span className=\"br_line\">\r\n                E-mail :<span className=\"space0\"> kimilguk@knou.ac.kr</span>\r\n              </span>\r\n            </span>\r\n          </p>\r\n          <p className=\"copy box_inner\">\r\n            Copyright(c) 리액트 IN 자바스크립트 all right reserved\r\n          </p>\r\n          <ul className=\"snslink clear\">\r\n            <li><a href=\"#LINK\">blog</a></li>\r\n            <li><a href=\"#LINK\">facebook</a></li>\r\n            <li><a href=\"#LINK\">instargram</a></li>\r\n          </ul>\r\n        </div>\r\n\r\n        <h2 className=\"hdd\">빠른 링크 : 전화 문의,카카오톡,오시는 길,꼭대기로</h2>\r\n        <div className=\"quick_area\">\r\n          <ul className=\"quick_list\">\r\n            <li>\r\n              <a href=\"#LINK\">\r\n                <h3>전화 문의</h3>\r\n                <p>010-1234-5678</p>\r\n              </a>\r\n            </li>\r\n            <li>\r\n              <a href=\"#LINK\">\r\n                <h3>카카오톡 <em>상담</em></h3>\r\n                <p>1:1상담</p>\r\n              </a>\r\n            </li>\r\n            <li>\r\n              <a href=\"#LINK\"><h3 className=\"to_contact\">오시는 길</h3></a>\r\n            </li>\r\n          </ul>\r\n          <p className=\"to_top\">\r\n            <a href=\"#layout0\" className=\"s_point\">TOP</a>\r\n          </p>\r\n        </div>\r\n\r\n      </footer>\r\n    );\r\n  }\r\n}\r\nexport default Footer;\r\n","/* App.js */\nimport React, {Component} from 'react';\nimport Header from './components/Header';\nimport HeaderBanner from './components/HeaderBanner';\nimport BoardList from './components/BoardList';\nimport Control from './components/Control';\nimport BoardView from './components/BoardView';\nimport BoardForm from './components/BoardForm';\nimport BoardFormUpdate from './components/BoardFormUpdate';\nimport Footer from './components/Footer';\nimport './App.css';\n//헤더 컴포넌트를 만드는 코드(src/components/HeaderBanner.js)\n\n//리스트제목 컴포넌트를 만드는 코드(src/components/BoardList.js)\n\n//리스트뷰 컴포넌트를 만드는 코드(src/components/BoardView.js)\n\n//메인 컴포넌트를 만드는 코드(아래)\nclass App extends Component {\n  //콤포넌트 생성자 : 콤포넌트 실행시 자동 실행(초기화)\n  constructor (props) {\n    //props(속성) 과 state(자료) 관계\n    super (props); //부모클래스-Component의 props속성을 사용하겠다고 선언, 이후 부터 this 키워드 사용가능\n    this.max_board_id = 3; //전역변수 BoardList의 최근 입력 Key값 초기화\n    //부모클래스 props속성의 state값 초기화\n    this.state = {\n      mode: 'default', //변수에 초기값 지정\n      selected_boardView_id: null, //선택한 게시물 번호 강제로 초기화 할때,\n      headerBanner: {title: '리액트 IN 자바스크립트', sub: '한줄게시판'}, //json 1차원 데이터 객체\n      //배열 2차원 데이터(아래)\n      boardList: [\n        {\n          id: 1,\n          title: '리액트 IN 자바스크립트? 미션 프로젝트 (한줄게시판 만들기)1',\n          desc: '이 프로젝트는 리액트를 이용해서 CRUD를 실습해 볼 수 있습니다.1',\n        },\n        {\n          id: 2,\n          title: '리액트 IN 자바스크립트? 미션 프로젝트 (한줄게시판 만들기)2',\n          desc: '이 프로젝트는 리액트를 이용해서 CRUD를 실습해 볼 수 있습니다.2',\n        },\n        {\n          id: 3,\n          title: '리액트 IN 자바스크립트? 미션 프로젝트 (한줄게시판 만들기)3',\n          desc: '이 프로젝트는 리액트를 이용해서 CRUD를 실습해 볼 수 있습니다.3',\n        },\n      ],\n    };\n  }\n  getBoardViewContent () {\n    var i = 0;\n    while (i < this.state.boardList.length) {\n      var data = this.state.boardList[i];\n      if (data.id === this.state.selected_boardView_id) {\n        return data;\n        //break;\n      }\n      i = i + 1;\n    }\n  }\n  getBoardView () {\n    var _title, _desc = null, _article = null, _content = null;\n    if (this.state.mode === 'default') {\n      _title = this.state.headerBanner.title;\n      _desc = this.state.headerBanner.sub;\n      _article = <BoardView id={'헤더배너'} title={_title} desc={_desc} />;\n    } else if (this.state.mode === 'list') {\n      _article = null;\n      //this.state.selected_boardView_id = 0;\n    } else if (this.state.mode === 'create') {\n      _article = (\n        <BoardForm\n          onSubmit={function (_title, _desc) {\n            //신규 BoradList 내용 추가\n            console.log (_title, _desc); //디버그\n            this.max_board_id = this.max_board_id + 1;\n            //boardList배열 마지막에 값 추가하기 concat함수(원본복제생성 후 변경) 사용-immutable(원본불변)\n            //boardList배열 마지막에 값 추가하기 push함수(원본데이터 변경) 사용\n            //boardList배열 마지막에 값 추가하기 Array.from+push함수(원본복제생성 후 변경) 사용-immutable(원본불변)\n            /* this.state.boardList.push ({\n              id: this.max_board_id,\n              title: _title,\n              desc: _desc,\n            }); this.setState ({boardList: this.state.boardList}); */\n            //boardList배열 마지막에 값 추가하기 concat함수(기존 데이터에 추가) 사용-속도 향상\n            /* var _contents = this.state.boardList.concat ({\n              id: this.max_board_id,\n              title: _title,\n              desc: _desc,\n            });  */\n            var _contents = Array.from (this.state.boardList); //배열일때\n            //var _contents = Object.assign ({}, this.state.boardList);//json 객체일때 사용법.\n            _contents.push ({\n              id: this.max_board_id,\n              title: _title,\n              desc: _desc,\n            });\n            //화면 리프레시가 않됨-관련함수:shouldComponentUpdate.\n            this.setState ({boardList: _contents});\n            this.setState ({\n              mode: 'read',\n              selected_boardView_id: this.max_board_id,\n            });\n          }.bind (this)}\n        />\n      );\n    } else if (this.state.mode === 'update') {\n      _content = this.getBoardViewContent ();\n      //if (_content === undefined) {\n      if (this.state.selected_boardView_id === null) {\n        console.log ('update제약', _content);\n        _title = '수정확인';\n        _desc = '게시물을 선택하셔야 합니다.';\n        _article = <BoardView title={_title} desc={_desc} />;\n        return _article;\n      }\n      _article = (\n        <BoardFormUpdate\n          data={_content}\n          onSubmit={function (_id, _title, _desc) {\n            //신규 BoradList 내용 추가\n            console.log ('update', _id, _title, _desc); //디버그\n            var _contents = Array.from (this.state.boardList); //배열복제\n            var i = 0;\n            while (i < _contents.length) {\n              if (_contents[i].id === _id) {\n                _contents[i] = {id: _id, title: _title, desc: _desc};\n                break;\n              }\n              i = i + 1;\n            }\n            //화면 리프레시가 않됨-관련함수:shouldComponentUpdate.\n            this.setState ({boardList: _contents, mode: 'read'});\n          }.bind (this)}\n        />\n      );\n    } else if (this.state.mode === 'delete') {\n      _article = null;\n      console.log ('delete후 출력');\n      _title = '삭제확인';\n      _desc = '게시물이 정상 삭제되었습니다.';\n      _article = <BoardView title={_title} desc={_desc} />;\n      return _article;\n    } else if (this.state.mode === 'read') {\n      _content = this.getBoardViewContent ();\n      _article = (\n        <BoardView\n          id={_content.id}\n          title={_content.title}\n          desc={_content.desc}\n        />\n      );\n      //초기값 강제로 줄때(아래)\n      /* _title = this.state.boardList[0].title;\n      _desc = this.state.boardList[0].desc; */\n    }\n    return _article;\n  }\n  //props-state의 값이 바뀌면 html을 그리는 함수 render 자동으로 재 실행됨\n  render () {\n    console.clear ();\n    console.log ('render()안에서 this는 App.js콤포넌트 모듈 자신을 가리킨다.', this);\n\n    //constructor (props) 부모클래스의 초기화한 값을 아래 태그의 속성(props)에 this값으로 전달\n    return (\n      <div className=\"App\">\n        <Header />\n        <div id=\"container\">\n          <HeaderBanner\n            title={this.state.headerBanner.title}\n            sub={this.state.headerBanner.sub}\n            onChangePage={function () {\n              //alert ('HeaderBanner');//디버그\n              this.setState ({mode: 'default', selected_boardView_id: null});\n            }.bind (this)}\n          />\n          {/* <header>\n            <h1>\n              <a\n                href=\"/\"\n                onClick={function (e) {\n                  console.log (e);\n                  e.preventDefault ();\n                  //this.state.mode = 'read';//작동않됨.\n                  this.setState ({mode: 'default'});\n                  //debugger; //크롬 개발자도구 Sources 에서 현재 라인에서 멈춤\n                }.bind (this)} //함수내에서 this사용시 bind 로 주입필요\n              >\n                {this.state.headerBanner.title}\n              </a>\n            </h1>\n            {this.state.headerBanner.sub}\n          </header> */}\n          {/* <!-- bodytext_area --> */}\n          <div className=\"bodytext_area box_inner\">\n            <BoardList\n              onChangePage={function (id) {\n                //alert ('BoardList');//디버그\n                //debugger;크롬 디버거연동\n                this.setState ({\n                  mode: 'read',\n                  selected_boardView_id: Number (id),\n                });\n              }.bind (this)}\n              data={this.state.boardList}\n            />\n            <Control\n              onChangeMode={function (_mode) {\n                if (_mode === 'list') {\n                  this.setState ({\n                    selected_boardView_id: null,\n                  });\n                }\n                if (_mode === 'delete') {\n                  if (this.state.selected_boardView_id === null) {\n                    alert ('선택된 게시물이 없습니다.');\n                    return false;\n                  }\n                  if (window.confirm ('정말로 삭제하시겠습니까?')) {\n                    var _deleteContents = Array.from (this.state.boardList);\n                    var i = 0;\n                    while (i < _deleteContents.length) {\n                      if (\n                        _deleteContents[i].id ===\n                        this.state.selected_boardView_id\n                      ) {\n                        _deleteContents.splice (i, 1);\n                        this.setState ({\n                          selected_boardView_id: null,\n                        });\n                        break;\n                      }\n                      i = i + 1;\n                    }\n                    this.setState ({\n                      boardList: _deleteContents,\n                      mode: 'delete',\n                    });\n                  }\n                } else {\n                  this.setState ({\n                    mode: _mode,\n                  });\n                }\n              }.bind (this)}\n            />\n            {this.getBoardView ()}\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/* index.js */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render (<App />, document.getElementById ('wrap'));\n\n// 앱이 오프라인에서 작동하고 더 빨리로드되도록하려면\n// 아래의 unregister()를 register()로 변경 합니다.\nserviceWorker.unregister ();\n"],"sourceRoot":""}